[
  {
    "objectID": "docs/lessons/lesson-4-markdown-guidebook/index.html",
    "href": "docs/lessons/lesson-4-markdown-guidebook/index.html",
    "title": "Lesson 4: Markdown Guidebook",
    "section": "",
    "text": "Estimated reading time: 16 minute(s).\nMarkdown is a lightweight markup language with plain-text-formatting syntax. What this means is that Markdown is easy-to-write using any generic text editor and easy-to-read in its raw form. When you render a page or document, R Studio translates the Markdown syntax to HTML code. I structured this part of the lesson to show you the Markdown way of writing, the HTML equivalent, and what the rendered output looks like. You should take note of the structure of the HTML. There are exceptions, but most HTML elements are wrapped in tags—an opening tag at the beginning of the element that looks like this &lt;tag&gt; and a closing tag at the end that looks like this &lt;/tag&gt;. Say you want to write a level 1 header in HTML. You would code it like so: &lt;h1&gt;Header 1&lt;/h1&gt;. Moving on."
  },
  {
    "objectID": "docs/lessons/lesson-4-markdown-guidebook/index.html#headings",
    "href": "docs/lessons/lesson-4-markdown-guidebook/index.html#headings",
    "title": "Lesson 4: Markdown Guidebook",
    "section": "Headings",
    "text": "Headings\nTo create a heading, add number signs (#) in front of a word or phrase. The number of signs you use should correspond to the heading level you want. For example, to create a heading level two (&lt;h2&gt;), use two number signs (e.g., ## This is a Header ). There are 6 header levels. Level 1 is the largest and mostly used for titles.\n\n\n\n\nMarkdown\n\n\nHTML\n\n\nRendered Output\n\n\n\n\n\n# Header L1\n\n\n&lt;h1&gt;Header L1&lt;/h1&gt;\n\n\n\nHeader L1\n\n\n\n\n\n## Header L2\n\n\n&lt;h2&gt;Header L2&lt;/h2&gt;\n\n\n\nHeader L2\n\n\n\n\n\n### Header L3\n\n\n&lt;h3&gt;Header L3&lt;/h3&gt;\n\n\n\nHeader L3\n\n\n\n\n\n#### Header L4\n\n\n&lt;h4&gt;Header L 4&lt;/h4&gt;\n\n\n\nHeader L4\n\n\n\n\n\n##### Header L5\n\n\n&lt;h5&gt;Header L5&lt;/h5&gt;\n\n\n\nHeader L5\n\n\n\n\n\n###### Header L6\n\n\n&lt;h6&gt;Header L6&lt;/h6&gt;\n\n\n\nHeader L6\n\n\n\n\n\nHeading Best Practices\nApplications that use Markdown do not agree on how to handle a missing space between the number signs (#) and the heading text. For compatibility, always put a space between the number signs and the heading name.\n\n\n✅ Do this\n❌ But not this\n\n\n# A Heading\n#A Heading\n\n\nFor the same reason, you should also put blank lines before and after a heading.\n\n\n\n\n\n\n✅ Do this\n❌ But not this\n\n\nPut a blank line before…# Heading…and after a heading.\nWithout blank lines, # Headingmight not render correctly."
  },
  {
    "objectID": "docs/lessons/lesson-4-markdown-guidebook/index.html#paragraphs",
    "href": "docs/lessons/lesson-4-markdown-guidebook/index.html#paragraphs",
    "title": "Lesson 4: Markdown Guidebook",
    "section": "Paragraphs",
    "text": "Paragraphs\nTo create paragraphs, simply use a blank line to separate one or more lines of text.\n\n\n\n\n\n\n\nMarkdown\nHTML\nRendered Output\n\n\n\nI really like using Markdown.\n&lt;p&gt;I really like using Markdown.&lt;/p&gt;\nI really like using Markdown.\n\n\n\nI think I'll use it to format  all of my documents from now on.\n\n&lt;p&gt;I think I’ll use it to format all of my documents from now on.&lt;/p&gt;\nI think I’ll use it to format all of my documents from now on.\n\n\n\nParagraph Best Practices\nUnless the paragraph is in a list, do not indent paragraphs with spaces or tabs. If you must indent try this little hack\n\n\n\n\n\n\n✅ Do this\n❌ But not this\n\n\n\nDon’t put tabs or spaces  in front of your paragraphs.\n    This can result in unexpected  formatting problems.\n\n\nKeep lines left-aligned like this.\n    Don’t add tabs or spaces  in front of paragraphs."
  },
  {
    "objectID": "docs/lessons/lesson-4-markdown-guidebook/index.html#line-breaks",
    "href": "docs/lessons/lesson-4-markdown-guidebook/index.html#line-breaks",
    "title": "Lesson 4: Markdown Guidebook",
    "section": "Line Breaks",
    "text": "Line Breaks\n\n\n\n\n\n\n\nMarkdown\nHTML\nRendered Output\n\n\n\nThis is the first line.And this is the second line.\n\n&lt;p&gt;This is the first line.&lt;br&gt;  And this is the second line.&lt;/p&gt;\nThis is the first line.  And this is the second line.\n\n\nLine Break Best Practices\nYou can use two or more spaces (commonly referred to as trailing whitespace) for line breaks in most Markdown applications, but apparently this is a bit controversial. For one it is hard to see trailing whitespace in an editor, and many people (accidentally or intentionally) put two spaces after every sentence. For this reason, you may want to use something other than trailing whitespace for line breaks. If your Markdown application supports HTML, you can use the &lt;br&gt; HTML tag1. For compatibility, use trailing white space or the  HTML tag at the end of the line."
  },
  {
    "objectID": "docs/lessons/lesson-4-markdown-guidebook/index.html#emphasis",
    "href": "docs/lessons/lesson-4-markdown-guidebook/index.html#emphasis",
    "title": "Lesson 4: Markdown Guidebook",
    "section": "Emphasis",
    "text": "Emphasis\nEmphasis can be added by making text bold or italic.\nBold\nTo bold text, add either two asterisks (**) or two underscores (__) before and after a word or phrase. To bold the middle of a word for emphasis, add two asterisks (**) without spaces around the letters.\n\n\n\n\n\n\n\nMarkdown\nHTML\nRendered Output\n\n\n\nBold text **rocks**.\nBold text &lt;strong&gt;rocks&lt;/strong&gt;.\nBold text rocks.\n\n\nBold text __rocks__.\nBold text &lt;b&gt;rocks&lt;/b&gt;.\nBold text rocks.\n\n\nBold**text**rocks.\nBold&lt;b&gt;text&lt;/b&gt; rocks.\nBoldtextrocks.\n\n\nBold Best Practices\nMarkdown applications do not agree on how to handle underscores (_) in the middle of a word. For compatibility, use asterisks to bold the middle of a word for emphasis.\n\n\n✅ Do this\n❌ But not this\n\n\nBold**text**rocks.\nBold__text__rocks.\n\nItalic\nTo italicize text, add one asterisk (*) or underscore (_) before and after a word or phrase. To italicize the middle of a word for emphasis, add one asterisk (*) without spaces around the letters.\n\n\n\n\n\n\n\nMarkdown\nHTML\nRendered Output\n\n\n\nItalicized text is *awesome*.\nItalicized text is &lt;em&gt;awesome&lt;/em&gt;.\nItalicized text is awesome.\n\n\nItalicized text is _awesome_.\nItalicized text is &lt;em&gt;awesome&lt;/em&gt;.\nItalicized text is awesome.\n\n\nItalicized*text*isawesome.\nItalicized&lt;em&gt;text&lt;/em&gt;isawesome.\nItalicizedtextisawesome.\n\n\nItalic Best Practices\nAs above, Markdown applications don’t agree on how to handle underscores in the middle of a word. For compatibility, use asterisks to italicize the middle of a word for emphasis.\n\n\n✅ Do this\n❌ But not this\n\n\nItalicized text is *awesome*.\nItalicized text is _awesome_.\n\nBold and Italic\nTo emphasize text with bold and italics at the same time, add three asterisks (***) or three underscores (___) before and after a word or phrase. To bold and italicize the middle of a word for emphasis, add three asterisks without spaces around the letters.\n\n\n\n\n\n\n\nMarkdown\nHTML\nRendered Output\n\n\n\nThis text is ***really important***.\nThis text is &lt;em&gt;&lt;strong&gt;really important&lt;/strong&gt;&lt;/em&gt;.\nThis text is really important.\n\n\nThis text is ___really important___.\nThis text is &lt;em&gt;&lt;strong&gt;really important&lt;/strong&gt;&lt;/em&gt;.\nThis text is really important.\n\n\nThis text is __*really important*__.\nThis text is &lt;em&gt;&lt;strong&gt;really important&lt;/strong&gt;&lt;/em&gt;.\nThis text is really important.\n\n\nThis text is **_really important_**.\nThis text is &lt;em&gt;&lt;strong&gt;really important&lt;/strong&gt;&lt;/em&gt;.\nThis text is really important.\n\n\nThis textis***really***important.\nThis textis&lt;em&gt;&lt;strong&gt;really&lt;/strong&gt;&lt;/em&gt;important.\nThis textisreallyimportant.\n\n\nBold and Italic Best Practices\nFor compatibility, use asterisks to bold and italicize the middle of a word for emphasis.\n\n\n\n\n\n\n✅ Do this\n❌ But not this\n\n\nThis textis***really***important.\nThis textis___really___important."
  },
  {
    "objectID": "docs/lessons/lesson-4-markdown-guidebook/index.html#lists",
    "href": "docs/lessons/lesson-4-markdown-guidebook/index.html#lists",
    "title": "Lesson 4: Markdown Guidebook",
    "section": "Lists",
    "text": "Lists\nYou can organize items into ordered and unordered lists.\nOrdered Lists\nTo create an ordered list, add line items with numbers followed by periods. The numbers don’t have to be in numerical order, but if list starts with the number 1 subsequent list items will be rendered in sequential order. In fact, whatever number you start a list with becomes the smallest number in the list.\nTo write an ordered list in HTML you must enclose each list item in the &lt;li&gt; tag and wrap the whole list in the &lt;ol&gt; tag.\n\n\n\n\n\n\n\nMarkdown\nHTML\nRendered Output\n\n\n\n1. First item  2. Second item  3. Third item\n&lt;ol&gt;    &lt;li&gt;First item&lt;/li&gt;    &lt;li&gt;Second item&lt;/li&gt;    &lt;li&gt;Third item &lt;/li&gt;  &lt;/ol&gt;\n1. First item  2. Second item  3. Third item\n\n\n\n1. First item  1. Second item  1. Third item\n&lt;ol&gt;    &lt;li&gt;First item&lt;/li&gt;    &lt;li&gt;Second item&lt;/li&gt;    &lt;li&gt;Third item &lt;/li&gt;  &lt;/ol&gt;\n1. First item  2. Second item  3. Third item\n\n\n\n1. First item  9. Second item  2. Third item\n&lt;ol&gt;    &lt;li&gt;First item&lt;/li&gt;    &lt;li&gt;Second item&lt;/li&gt;    &lt;li&gt;Third item &lt;/li&gt;  &lt;/ol&gt;\n1. First item  2. Second item  3. Third item\n\n\n\n5. First item  1. Second item  9. Third item\n&lt;ol&gt;    &lt;li&gt;First item&lt;/li&gt;    &lt;li&gt;Second item&lt;/li&gt;    &lt;li&gt;Third item &lt;/li&gt;  &lt;/ol&gt;\n5. First item  6. Second item  7. Third item\n\n\n\nOrdered List Best Practices\nSome markup languages let you use a parenthesis ()) as a delimiter (e.g., 1) First item), but not all Markdown applications support this, so it isn’t a great option from a compatibility perspective. For compatibility, use periods only.\n\n\n✅ Do this\n❌ But not this\n\n\n\n1. First item\n1) First item\n\n\n2. Second item\n2) Second item\n\n\nUnordered Lists\nTo create an unordered list, add a dash (-), an asterisk (*), or a plus sign (+) in front of line items.\n\n\n\n\n\n\n\nMarkdown\nHTML\nRendered Output\n\n\n\n- First item  - Second item  - Third item\n&lt;ul&gt;    &lt;li&gt;First item&lt;/li&gt;    &lt;li&gt;Second item&lt;/li&gt;    &lt;li&gt;Third item &lt;/li&gt;  &lt;/ul&gt;\n• First item  • Second item  • Third item\n\n\n\n* First item  * Second item  * Third item\n&lt;ul&gt;    &lt;li&gt;First item&lt;/li&gt;    &lt;li&gt;Second item&lt;/li&gt;    &lt;li&gt;Third item &lt;/li&gt;  &lt;/ul&gt;\n• First item  • Second item  • Third item\n\n\n\n+ First item  + Second item  + Third item\n&lt;ul&gt;    &lt;li&gt;First item&lt;/li&gt;    &lt;li&gt;Second item&lt;/li&gt;    &lt;li&gt;Third item &lt;/li&gt;  &lt;/ul&gt;\n• First item  • Second item  • Third item\n\n\n\n\nIndent one or more items to create a nested list.\n\n\n\n\n\n\n\nMarkdown\nHTML\nRendered Output\n\n\n- First item  - Second item    - Indented item    - Indented item  - Third item\n&lt;ul&gt;    &lt;li&gt;First item&lt;/li&gt;    &lt;li&gt;Second item&lt;/li&gt;      &lt;ul&gt;        &lt;li&gt;Indented item&lt;/li&gt;        &lt;li&gt;Indented item&lt;/li&gt;      &lt;/ul&gt;    &lt;li&gt;Third item &lt;/li&gt;  &lt;/ul&gt;\n• First item  • Second item    ◦ Indented item    ◦ Indented item  • Third item\n\n\nUnordered List Best Practices\nMarkdown applications do not agree on how to handle different delimiters in the same list. For compatibility, do not mix and match delimiters in the same list—pick one and stick with it.\n\n\n✅ Do this\n❌ But not this\n\n\n\n- First item\n* First item\n\n\n- Second item\n- Second item\n\n\n- Third item\n+ Third item\n\n\nAdding Elements in Lists\nTo add another element to a list, while preserving the continuity of the list, indent the element four spaces or one tab.\nAdding a paragraph\n1. This is the first list item.\n2. Here is the second list item.\n\n    I need to add another paragraph below the second list item.\n\n3. And here is the third list item.\nThe rendered output looks like this:\n\nThis is the first list item.\n\nHere is the second list item.\nI need to add another paragraph below the second list item.\n\nAnd here is the third list item.\nAdding a blockquote\n1. This is the first list item.\n2. Here's the second list item.\n\n     &gt; A blockquote would look great below the second list item.\n\n3. And here's the third list item.\nThe rendered output looks like this:\n\nThis is the first list item.\n\nHere’s the second list item.\n\nA blockquote would look great below the second list item.\n\n\nAnd here’s the third list item.\nImages\n1. Check out the file containing the course badge.\n2. Do you know what the pattern is overlaying the map?\n\n    &lt;img src=\"../../../images/panama_logo.png\" width=\"250\"&gt;\n\n3. Let me know what you think it is!\nThe rendered output looks like this:\n\nCheck out the file containing the course badge.\n\nDo you know what the pattern is overlaying the map?\n\n\nLet me know what you think it is!\nLists\nYou can nest an unordered list in an ordered list, or vice versa.\n1. First item\n2. Second item\n3. Third item\n    - Indented item\n    - Indented item\n4. Fourth item\nThe rendered output looks like this:\n\nFirst item\nSecond item\nThird item\n\nIndented item\nIndented item\n\n\nFourth item"
  },
  {
    "objectID": "docs/lessons/lesson-4-markdown-guidebook/index.html#blockquotes",
    "href": "docs/lessons/lesson-4-markdown-guidebook/index.html#blockquotes",
    "title": "Lesson 4: Markdown Guidebook",
    "section": "Blockquotes",
    "text": "Blockquotes\nTo create a blockquote, add a &gt; in front of a paragraph.\n&gt; Ants have the most complicated social organization on earth next to humans.\nThe rendered output looks like this:\n\nAnts have the most complicated social organization on earth next to humans2.\n\nBlockquotes with Multiple Paragraphs\n&gt; Ants have the most complicated social organization on earth next to humans.\n&gt;\n&gt; When you have seen one ant, one bird, one tree, you have not seen them all.\nThe rendered output looks like this:\n\nAnts have the most complicated social organization on earth next to humans.\nWhen you have seen one ant, one bird, one tree, you have not seen them all3.\n\nNested Blockquotes\nBlockquotes can be nested by adding a &gt;&gt; in front of the paragraph you want to nest.\n&gt; Geometry has two great treasures; one is the Theorem of Pythagoras; the other, the division of a line into extreme and mean ratio.\n&gt;\n&gt;&gt; The first we may compare to a measure of gold; the second we may name a precious jewel.\nThe rendered output looks like this:\n\nGeometry has two great treasures; one is the Theorem of Pythagoras; the other, the division of a line into extreme and mean ratio.\n\nThe first we may compare to a measure of gold; the second we may name a precious jewel4.\n\n\nBlockquotes with Other Elements\nBlockquotes can contain other Markdown formatted elements. Not all elements can be used—you will need to experiment to see which ones work.\n&gt; ### The sequencing data looks great.\n&gt;\n&gt; - The reads are long.\n&gt; - The error rate is low.\n&gt;\n&gt;  Now we are **ready*** analysis.\nThe rendered output looks like this:\n\nThe sequencing data looks great.\n\nThe reads are long.\nThe error rate is low.\n\nNow we are ready for analysis.\n\nBlockquotes Best Practices\nAs with headers, for compatibility, put blank lines before and after blockquotes.\n\n\n\n\n\n\n✅ Do this\n❌ But not this\n\n\nPut a blank line before…&gt; a blockquote…and after.\nWithout blank lines, &gt; a blockquotemight not render correctly.\n\nHorizontal Rules\nTo create a horizontal rule, use three or more asterisks (***), dashes (---), or underscores (___) on a line by themselves.\n***\n\n---\n\n_________________\n\nThe rendered output of all three looks identical:\nHorizontal Rule Best Practices\nFor compatibility, put blank lines before and after horizontal rules.\n\n\n\n\n\n\n✅ Do this\n❌ But not this\n\n\nPut a blank line before…—…and after a horizontal rule.\nWithout blank lines, —this would actually be a heading."
  },
  {
    "objectID": "docs/lessons/lesson-4-markdown-guidebook/index.html#links",
    "href": "docs/lessons/lesson-4-markdown-guidebook/index.html#links",
    "title": "Lesson 4: Markdown Guidebook",
    "section": "Links",
    "text": "Links\nTo create a link, enclose the link text in brackets ([ ]), followed immediately by the URL in parentheses (( )).\nThis is a link to awesome [geometric patterns](https://en.wikipedia.org/wiki/Islamic_geometric_patterns) .\nAnd here is the equivalent in HTML.\nThis is a link to awesome &lt;a href=\"https://en.wikipedia.org/wiki/Islamic_geometric_patterns\"&gt;link&lt;/a&gt; geometric patterns.\nThe rendered output looks like this:\nThis is a link to awesome geometric patterns.\nAdding Titles\nYou can optionally add a title for a link. This will appear as a tooltip when the user hovers over the link. To add a title, enclose it in quotation marks after the URL.\nThis is a link to awesome [geometric patterns](https://en.wikipedia.org/wiki/Islamic_geometric_patterns \"These are called Girih tiles. Incredible.\") .\nThe rendered output looks like this:\nThis is a link to awesome geometric patterns .\nURLs and Email Addresses\nTo quickly turn a URL or email address into a link, enclose it in angle brackets.\n&lt;https://en.wikipedia.org/wiki/Mariano_Rivera&gt;\n&lt;mariano@rivera.com&gt;\nThe rendered output looks like this:\nhttps://en.wikipedia.org/wiki/Mariano_Riveramariano@rivera.com\nFormatting Links\nTo emphasize links, add asterisks before and after the brackets and parentheses. To denote links as code, add backticks in the brackets.\n**[Substituted tryptamines](https://en.wikipedia.org/wiki/Substituted_tryptamine)** are super interesting.  \nThis is the *[Markdown Guide](https://www.markdownguide.org)*.\nWant to create an article in Distill? See the help page for the command &lt;a href='https://pkgs.rstudio.com/distill/reference/create_article.html'&gt;distill::create_article&lt;/a&gt;\nThe rendered output looks like this:\nSubstituted tryptamines are super interesting.\nThis is the Markdown Guide.\nWant to create an article in Distill? See the help page for the command distill::create_article"
  },
  {
    "objectID": "docs/lessons/lesson-4-markdown-guidebook/index.html#subscript",
    "href": "docs/lessons/lesson-4-markdown-guidebook/index.html#subscript",
    "title": "Lesson 4: Markdown Guidebook",
    "section": "Subscript",
    "text": "Subscript\nThis isn’t common, but some Markdown processors allow you to use subscript to position one or more characters slightly below the normal line of type. To create a subscript, use one tilde symbol (~) before and after the characters.\nC~12~H~16~N~2~\nThe rendered output looks like this:\nC12H16N2\nAnd of course, the HTML equivalent.\nC&lt;sub&gt;12&lt;/sub&gt;H&lt;sub&gt;16&lt;/sub&gt;N&lt;sub&gt;2&lt;/sub&gt;"
  },
  {
    "objectID": "docs/lessons/lesson-4-markdown-guidebook/index.html#superscript",
    "href": "docs/lessons/lesson-4-markdown-guidebook/index.html#superscript",
    "title": "Lesson 4: Markdown Guidebook",
    "section": "Superscript",
    "text": "Superscript\nAlso not common, but some Markdown processors allow you to use superscript to position one or more characters slightly above the normal line of type. To create a superscript, use one caret symbol (^) before and after the characters.\nz = z^2^ + C\nThe rendered output looks like this:\nz = z2 + C\nHTML equivalent.\nz = z&lt;sup&gt;2&lt;/sup&gt; + C"
  },
  {
    "objectID": "docs/lessons/lesson-4-markdown-guidebook/index.html#escaping-characters",
    "href": "docs/lessons/lesson-4-markdown-guidebook/index.html#escaping-characters",
    "title": "Lesson 4: Markdown Guidebook",
    "section": "Escaping Characters",
    "text": "Escaping Characters\nAs you have seen, there are many special characters used to format text in Markdown like the asterick (*) and the number or pound sign (#). To display a literal character that would otherwise be used to format text in a Markdown document, add a backslash (\\) in front of the character.\n\\# Without the backslash, this would be a header.\nThe rendered output looks like this:\n# Without the backslash, this would be a header.\nCharacters You Can Escape\nYou can use a backslash to escape the following characters.\n\n\nCharacter\nName\n\n\n\n\\\nbackslash\n\n\n`\nbacktick\n\n\n*\nasterisk\n\n\n_\nunderscore\n\n\n{ }\ncurly braces\n\n\n[ ]\nbrackets\n\n\n&lt; &gt;\nangle brackets\n\n\n( )\nparentheses\n\n\n#\npound sign\n\n\n+\nplus sign\n\n\n-\nminus sign (hyphen)\n\n\n.\ndot\n\n\n!\nexclamation mark"
  },
  {
    "objectID": "docs/lessons/lesson-4-markdown-guidebook/index.html#source-code",
    "href": "docs/lessons/lesson-4-markdown-guidebook/index.html#source-code",
    "title": "Lesson 4: Markdown Guidebook",
    "section": "Source Code",
    "text": "Source Code\nThe source code for this page can be accessed on GitHub  by clicking this link."
  },
  {
    "objectID": "docs/lessons/lesson-4-markdown-guidebook/index.html#credits",
    "href": "docs/lessons/lesson-4-markdown-guidebook/index.html#credits",
    "title": "Lesson 4: Markdown Guidebook",
    "section": "Credits",
    "text": "Credits\nThis lesson was modeled (and mostly copied!) from the Markdown Basic Syntax Guide by Matt Cone licenced under CC BY-SA 4.0."
  },
  {
    "objectID": "docs/lessons/lesson-4-markdown-guidebook/index.html#footnotes",
    "href": "docs/lessons/lesson-4-markdown-guidebook/index.html#footnotes",
    "title": "Lesson 4: Markdown Guidebook",
    "section": "Footnotes",
    "text": "Footnotes\n\nNote, this is one of those exceptions to the opening/closing HTML tags. To insert single line breaks in a text you simply add &lt;br&gt; where you want the break↩︎\nE. O. Wilson said that.↩︎\nE. O. Wilson said that too.↩︎\nJohannes Kepler said that.↩︎"
  },
  {
    "objectID": "docs/lessons/lesson-2-build-your-working-environment/index.html",
    "href": "docs/lessons/lesson-2-build-your-working-environment/index.html",
    "title": "Lesson 2: Build your Working 🧱️ Environment",
    "section": "",
    "text": "We have a wide range of experience levels in this course, so this lesson is devoted to the basics of setting up your working environment and laying down a good foundation for your projects. I would like to give everyone a chance to get everything installed and to get comfortable with these new tools before we dive in. I realize that some of you may have a lot of this done already. Let’s begin.\nIn this lesson you will install the basic tools needed for the course, namely R, R Studio, Quarto and a few R packages. Depending on your interests, you may also want to install some Quarto extensions. At its simplest, R is like the engine of a car while RStudio is like the dashboard. More precisely, R is the programming language that runs computations, while RStudio is an integrated development environment (IDE) that provides an interface with many convenient features and tools. Just as having access to a speedometer, rear view mirrors, and a navigation system makes driving much easier, using RStudio’s interface makes using R much easier as well.\nAs I mentioned, our goals for this course are to build data-driven web products. Each lesson is built around adding functionality to your project. You will start with something simple and, hopefully, by the end have something awesome. Some of you may have more experience with some of these tools than I do. That’s great—you can help me and help your classmates. If you think something I say is wrong, please tell me. I would rather do something the right way than be right about the wrong way I am doing something.\nThe other thing I want to mention is that I assure you this in not a web development course. As you go through this lesson it may feel like that is where we are heading, but I promise it is not. Markdown is built on top of HTML and CSS, so you will encounter these lanuguages from time to time. I am interested in functional sites that contain useful content, with maybe a little bit of flair. I have found that even a superficial knowledge of web development and design goes a long way in building good R Markdown sites."
  },
  {
    "objectID": "docs/lessons/lesson-2-build-your-working-environment/index.html#source-code",
    "href": "docs/lessons/lesson-2-build-your-working-environment/index.html#source-code",
    "title": "Lesson 2: Build your Working 🧱️ Environment",
    "section": "Source Code",
    "text": "Source Code\nThe source code for this page can be accessed on GitHub  by clicking this link."
  },
  {
    "objectID": "docs/lessons/lesson-2-build-your-working-environment/index.html#footnotes",
    "href": "docs/lessons/lesson-2-build-your-working-environment/index.html#footnotes",
    "title": "Lesson 2: Build your Working 🧱️ Environment",
    "section": "Footnotes",
    "text": "Footnotes\n\nI figured this out by going to the tmap CRAN repo and noticing that a GitHub page was listed under URL↩︎\nThe authors state that in order to use the development version of tmap, it is recommended to use the development version of tmaptools as well↩︎"
  },
  {
    "objectID": "docs/lessons/index.html",
    "href": "docs/lessons/index.html",
    "title": "Welcome to the Quarto Fieldguide",
    "section": "",
    "text": "Welcome to the Data Curation/R Markdown module of the STRI-McGill Neotropical field course. This module is meant as a complement for the rest of the curriculum and our main goals here are to: a) create interactive, data-driven, web products that capture analytical workflows, raw data, and data outputs; and b) give you the tools, motivation, and inspiration to make your science more accessible, transparent, and reproducible.\n\n\n\n\n\n\n   \n     \n     \n       Order By\n       Default\n         \n          Lessons\n        \n         \n          Date - Oldest\n        \n         \n          Date - Newest\n        \n     \n  \n\n\n\n\n  \n\n\n\n\nLesson 5: Markdown say hello to 🤝 R\n\n\n\n\n\nIn this lesson, you learn how to integrate code into your document using code chunks and inline code. We cover the structure of code chunks—how to properly format chunks by selecting a coding language, using chunk options, and naming chunks. We also cover how to integrate inline code for…\n\n\n\n\n\n\nJanuary 4, 2024\n\n\n17 min\n\n\n\n\n\n\n  \n\n\n\n\nLesson 4: Markdown Guidebook\n\n\n\n\n\nA lesson devoted to developing and honing your skills writing Markdown-formatted text. Your assignment is to write text and incorporate Markdown-formatted elements.\n\n\n\n\n\n\nJanuary 4, 2024\n\n\n34 min\n\n\n\n\n\n\n  \n\n\n\n\nLesson 3: Build 📖 a Basic Site\n\n\n\n\n\nIn this lesson we go through the steps for creating your first site. We cover the three building blocks of the web (HTML, CSS, JS), generate a basic site with Distill, and discuss the rendering process.\n\n\n\n\n\n\nJanuary 3, 2024\n\n\n20 min\n\n\n\n\n\n\n  \n\n\n\n\nLesson 2: Build your Working 🧱️ Environment\n\n\n\n\n\nIn this lesson we go through the steps building a working environment. Specifically, you will install R and RStudio IDE. You will also install some R packages needed to get started.\n\n\n\n\n\n\nJanuary 2, 2024\n\n\n12 min\n\n\n\n\n\n\n  \n\n\n\n\nLesson 1: Module 🦉 Overview\n\n\n\n\n\nIn the first lesson, we provide an overview for this module of the course. We cover the main objectives & expectations, introduce the various tools we will use, & layout some of the motivation and rationale for the module.\n\n\n\n\n\n\nJanuary 1, 2024\n\n\n23 min\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "Quarto® Fieldguide",
    "section": "",
    "text": "Welcome to the Data Curation/R Markdown module of the STRI-McGill Neotropical field course. This module is meant as a complement for the rest of the curriculum and our main goals here are to: a) create interactive, data-driven, web products that capture analytical workflows, raw data, and data outputs; and b) hopefully give you the tools, motivation, and inspiration to make your science more accessible, transparent, and reproducible."
  },
  {
    "objectID": "docs/lessons/lesson-1-module-overview/index.html",
    "href": "docs/lessons/lesson-1-module-overview/index.html",
    "title": "Lesson 1: Module 🦉 Overview",
    "section": "",
    "text": "Estimated reading time: 16 minute(s)."
  },
  {
    "objectID": "docs/lessons/lesson-1-module-overview/index.html#what-is-a-web-product",
    "href": "docs/lessons/lesson-1-module-overview/index.html#what-is-a-web-product",
    "title": "Lesson 1: Module 🦉 Overview",
    "section": "What is a web product?",
    "text": "What is a web product?\nOk, first things first. What do we mean by a web product? Well, for the purposes of this module, we consider a web product to be, primarily, a collection of HTML documents that can be opened with a browser like Chrome, Firefox, etc. That doesn’t necessarily mean that it needs to be hosted on the web, just that anyone can access the information without installing special software or understanding specific tools.\n\nIt is NOT a requirement of this course to publish your web product online.\n\nFurthermore, we will use R Markdown and the Distill framework to create what are called static (as opposed to dynamic) web products. The difference is straightforward. Dynamic 1 means that anytime a page loads, the content and look are tailored to the user, like Facebook or Twitter. Static means that everyone who visits the site sees the same thing.\nJust because your web product is static does not mean it will be dull. Unlike PDF documents, your web products will have dynamic, interactive components like tables, figures, maps, and so on. Consider this example of Supplementary Material that we submitted for a recent paper. Here is the pdf version (written in R Markdown & LaTeX) and here is the HTML version. While the content of the two documents are identical, their functionalities are not. The first thing to notice is that most of the data tables in the PDF document (called Supplementary Data) were too big to fit in the document and instead are uploaded as separate, stand-alone, text files to the journal’s website. On the other hand, in the HTML version, every data table is embedded in the document.\nGo ahead and check out the Content Description section and click on any of the links that say Supplementary Data. Supplementary Data 2 for example has 13 columns and 911 rows, far to large to fit (comfortably) in a PDF document. Have a look at Supplementary Data 3. Notice that you can copy or download the contents of the table, sort, search (try searching for invertebrate), and expand the full table (under Show entries, select All). This table even contains hyperlinks that lead to other important information. Go ahead and click on one of the links. Moving on."
  },
  {
    "objectID": "docs/lessons/lesson-1-module-overview/index.html#why-a-web-product",
    "href": "docs/lessons/lesson-1-module-overview/index.html#why-a-web-product",
    "title": "Lesson 1: Module 🦉 Overview",
    "section": "Why a web product?",
    "text": "Why a web product?\nGood question. For me the answer is Open Science—a movement to make scientific research (including publications, data, physical samples, and software) and its dissemination accessible to all levels of society, amateur or professional (Woelfle, Olliaro, and Todd 2011). Creating a web product can help make your science more accessible, transparent, and reproducible.\nConsider that many journals and journal articles sit behind pay walls that most people can’t access without paying an unreasonable price. That sucks, and while people are pushing back against this paradigm, for now this is the reality. We do our best to publish open access articles but sometimes this is not possible. A webpage allows you to share your science with a wider audience. By and large, journal articles are highly technical documents. There is nothing wrong with this; it is just the nature of the medium. But this can make the information inaccessible to non-experts. By also presenting your work as a web product you have the opportunity to tell the story behind the science, which can have important outreach implications (Forrester 2017).\nA typical journal article is just a few pages, but we all know that a lot more goes into a study than what we usually see in print. Even with extensive Supplementary Material, authors are limited by what they can include in their publication. With a web product you are liberated from these limitations. A webpage gives you a venue to discuss all of the stuff that didn’t make it into your publication and to tell a more complete story of your science. Do you have a gallery of photos from your fieldwork? What about a bunch of statistical tests you tried that didn’t work? Or some personal thoughts on the system you study? In most cases this information would be inappropriate for a journal article but it is still useful and interesting information to share.\nI think it is an important obligation of all scientists is to make their studies transparent and reproducible. If you publish a study I should––with minimal effort––be able to find your data, carry out the same analyses, and reach the same conclusions. There should be no mystery. Sadly, this is not always the case. In my own field of microbial ecology, it can be a daunting task to find raw data from other studies and even harder to figure out exactly how the data was analyzed. Without proper documentation, you may even forget how you did something. Here is a sobering quote from a Nature News Feature from about results of a survey given to to 1,500 scientists on the state of reproducible science.\n\n More than 70% of researchers have tried and failed to reproduce another scientist’s experiments, and more than half have failed to reproduce their own experiments. Those are some of the telling figures that emerged from Nature’s survey of 1,576 researchers who took a brief online questionnaire on reproducibility in research.  (Baker 2016)\n\n\n\nAs of today, this article has been cited at least 2225 times.  2\nIf however, you build a web product around your project, where you document everything you do no matter how trivial, you can avoid these pitfalls and produce truly reproducible and transparent science. Everything I do now ends up on a project webpage. I can easily share the information and I no longer have directories filled with random bits of information on my computer. My websites have a much better memory than I do. So what is reproducible and transparent science? Turns out there really isn’t a starndard, well-defined definition\nAccording to this article in Science Translational Medicine, reproducibility …\n\n` … [is a] set of procedures that permit the reader of a paper to see the entire processing trail from the raw data and code to figures and tables.  (Goodman, Fanelli, and Ioannidis 2016).\n\nOr the U.S. National Science Foundation (NSF) defines it this way …\n\n` … refers to the ability of a researcher to duplicate the results of a prior study using the same materials as were used by the original investigator.  (Cacioppo et al. 2015)\n\nOf course, all of this is easier said than done. Researchers interested in reaching a wider audience and presenting tranparent and reproducible science face many challenges; they are under a lot of pressure to produce papers and often not given the chance to pursue these activities (Forrester 2017). So what can we do about it? I think that a good first step is to create web products that embrace the concepts of accessibility, transparency, and reproducibility. Institutional outreach and media departments do an incredible job of presenting the highlights of science, but they do not have the time or resources to go much deeper. I believe that with a little organization, training, and support we can all create web products that add value to the science, whether as educational and reference tools, or as outreach components.\nConsider again the paper we recently published on an acute hypoxic event in Bocas del Toro published in Nature Communications. All Nature journals now require authors to adhere to Reporting standards and availability of data, materials, code and protocols.\n\n … authors are required to make materials, data, code, and associated protocols promptly available to readers without undue qualifications. \n\nAuthors must include a Data availability and Code availability statements in their papers. Here is the Code Availability statement from our paper.\n\n\n\n\n\n\n\n\nAnd here is @coraloha reaction on Twitter. Some people get really jazzed about Open Science  3\n\n\n\nWhoaaaaaa now this is open science to the next level! And the name, come on…Metal AF 🔥 🎸 🤘 https://t.co/8sznPR5QYz\n\n— Dr. Chris Wall ((coraloha?)) July 29, 2021\n\n\n\n\n Assignment\nSo what do you think? Is Open Science important? Do you think web products can help communicate your science in a more accessible, transparent, and reproducible way? Your assignment is to read up on Open Science and reproducible research. There is a lot of debate on this subject and what I presented above is my view on the topic. It important that you form your own opinion. Here are a few articles to get you started but I do encourage you to dig deeper.\n\n\n1,500 scientists lift the lid on reproducibility (Baker 2016)\n\n\nWhat does research reproducibility mean? (Goodman, Fanelli, and Ioannidis 2016)\n\n\nA manifesto for reproducible science (Munafò et al. 2017)\n\n\nMoving along."
  },
  {
    "objectID": "docs/lessons/lesson-1-module-overview/index.html#why-r-rstudio-r-markdown",
    "href": "docs/lessons/lesson-1-module-overview/index.html#why-r-rstudio-r-markdown",
    "title": "Lesson 1: Module 🦉 Overview",
    "section": "Why R, RStudio, & R Markdown?",
    "text": "Why R, RStudio, & R Markdown?\nThere are many ways to make a website—–Squarespace, Wordpress, Wix, and so on. You can even code your own website in HTML, CSS, and JavaScript. However, in my experience, none of these platforms allow you to run and document code while constructing web products quite like the combination of R, RStudio, & R Markdown. As with everything there are limitations, but I feel the benefits outweigh the drawbacks.\nR\nR is both a programming language and a software environment for statistical computing and graphics. At some point, I imagine you will all need to need to embrace a programming environment to analyze your data and summarize your findings using figures, tables, etc. R is certainly not the only way to do this; however I believe this environment offers a valuable suite of tools for your scientific needs. The benefits of R include; a) it is free and open source, b) its capabilities are extended through user-created packages4, c) it has a huge community of users (which means it is well supported), d) it is powerful and flexible.\nRStudio\nRStudio is an integrated development environment (IDE) for R language 5. Take a moment to familiarize yourself with the idea of an IDE—in a nutshell, RStudio provides a holistic working environment to process (R) code, generate figures/tables, and create websites.\n\nImagine a car. Think of R as the engine and the RStudio IDE as the dashboard.\n\nR Markdown\nR Markdown is really the bread and butter of what we will be doing. R Markdown is a file format (.Rmd) for making dynamic documents with R. R Markdown combines the syntax of Markdown with the language (and environment) of R. R Markdown documents are written in Markdown—a lightweight markup language (like HTML), that uses a relatively simple syntax to facilitate the transformation of human-readible text files into .html or .pdf documents. What this means is that rather than writing HTML and CSS code to make a website, you write your content in Markdown, which is then translated (by RStudio in this case) to web content. (R) code in your document is embedded within code chunks. During the building of a page or site, RStudio identifies code chunks, runs the code, translates the results to Markdown, and then renders the output to a HTML file.\n\nYou do not need to include R code to produce a R Markdown web product. If fact, I learned R by first writing R Markdown documents.\n\n\n\n\n\n\n\n\n         \n\nThe rendering process—creating web pages from R Markdown documents (R code plus Markdown). This figure contains clickable links if you are interested in learning more about these tools.\n\n\nWhen a page or site is rendered, the R code in your R Markdown document (.Rmd) is first processed by a program called knitr. Knitr executes all the R code, knits the results together with the Markdown text, and creates a new Markdown document. The new Markdown document is then processed by PanDoc, which converts the Markdown syntax into HTML and CSS code. PanDoc is like a swiss-army knife for Markdown—–it can covert many types of Markdown documents into a variety of other formats. Don’t worry, most of these steps happen behind the scenes. As long as you have a properly formatted R Markdown document, these tools will take care of the rest.  6"
  },
  {
    "objectID": "docs/lessons/lesson-1-module-overview/index.html#why-distill",
    "href": "docs/lessons/lesson-1-module-overview/index.html#why-distill",
    "title": "Lesson 1: Module 🦉 Overview",
    "section": "Why Distill?",
    "text": "Why Distill?\nIn this module we will use the Distill framework to create our web products. Distill for R Markdown is a web publishing format optimized for scientific and technical communication. We are using Distill because it a) is a very stable format developed and actively maintained by RStudio; b) has a large and active user community; c) provides a good balance of functionality and ease of use; and d) is a minimal, lightly themed, template focused on writing and code.\nI think the main downside of Distill is that you are limited by how much customization you can do. Distill sites can be customized to some degree (with a bit of effort7) but not nearly to the degree of other R Markdown frameworks like blogdown and hugodown, both of which use Hugo for building sites. For a better idea of what I am talking about, have a look at a site I built using blogdown and Hugo.\nSome features of the Distill framework include:\n\nReader-friendly typography that adapts well to mobile devices.\nFeatures essential to technical writing like LaTeX math, citations, and footnotes.\nFlexible figure layout options (e.g. displaying figures at a larger width than the article text).\nAttractively rendered tables with optional support for pagination.\nSupport for a wide variety of diagramming tools for illustrating concepts.\nThe ability to incorporate JavaScript and D3-based interactive visualizations."
  },
  {
    "objectID": "docs/lessons/lesson-1-module-overview/index.html#student-role",
    "href": "docs/lessons/lesson-1-module-overview/index.html#student-role",
    "title": "Lesson 1: Module 🦉 Overview",
    "section": "Student role",
    "text": "Student role\nThroughout this field course, you will all be designing and running experiments, making observations and measurements, collecting data, etc., often as part of a group with fellow students. Your job for this module of the course is to take all the parts of your projects—hypotheses, background information, methods, results, and conclusions—and capture these elements in a R Markdown web product using the Distill framework.\n\n Regardless of whether you are part of a group or running solo, you will each create a web product that contains the details for at least two projects you work on in the course.\n\nYou have two choices on how to present your projects.\n\nWebsite: You can present your projects in website style using the Distill website template. Here is an example of a Distill website we created for a recent publication on an acute hypoxic event in Bocas del Toro called Hypocolypse.\nBlog: Or you can present your projects in blog style using the Distill blog template. Want an example of a blog created using Distill? Well, you’re looking at one right now :)\n\nWe will get into the nitty-gritty of the differences between the two formats in subsequent lessons. For now, let’s summarize the key differences.\nStructural difference: A website is simply a collection of pages that can be accessed via the navigation bar at the top of a page. A blog contains 1) a collection of posts plus 2) a dedicated page to list all posts, called a listing page. The listing page is usually, but not always, the home page. A Distill blog is basically a distill website with added blog posts.\nLayout difference: Websites require you to manually set up links to pages on your site. Within a blog, Distill creates the listing page, which collects links to posts for you, displaying key metadata (like date published, author, categories, title, etc.) and a thumbnail image.\nWorkflow difference: All pages on a Distill website (and root pages of blogs) are re-rendered (i.e., re-built) each time the site is built. However, individual blog posts must be rendered on their own, with intent. Why? Well, it is because R packages are upgraded all the time and upgrades tend to break older code. So continuously re-rendering really old posts is nearly impossible to do without errors.\n So which is better, a Distill blog or website? Well, that depends on how you want to portray and display your projects. OK then, which is easier? Based on my experience using Distill (5 websites and now 1 blog), I would have to say that building and managing a website is slightly more intuitive than a blog. This mainly has to do with how files are organized in your working directory, basically the structural differences I described above. The directory of a website has a flat structure, meaning all of your R Markdown documents (.Rmd) are in the main directory. With a blog, the .Rmd files are collected in the _posts directory. This structure can make it tricky sometimes to figure out how to create links that connect different parts of the site, so called internal link. But really, both have roughly the same learning curve; a tiny bit steep at the beginning then a plateau of smooth sailing. So my advivce is go with what works best for you.\n\n Assignment\nYour first assignment is to think about the format you want to use, website or blog. You do not have to decide now but do check out the examples provided above to get a better sense of the format differences between the two. If you’re up to it, go ahead and read through the Distill website template and the Distill blog template pages. If you have little or no experience with this type of coding, most of the content on these pages will be gibberish. But fear not! Soon enough, this will all make sense.\nLastly, I wanted to add that some of you may have a lot of experience with these tools already. That’s great––you can help your classmates with their projects. If you think something I say doesn’t make sense, please say something. I would rather do something the right way than be right about the way I am doing something."
  },
  {
    "objectID": "docs/lessons/lesson-1-module-overview/index.html#instructor-role",
    "href": "docs/lessons/lesson-1-module-overview/index.html#instructor-role",
    "title": "Lesson 1: Module 🦉 Overview",
    "section": "Instructor role",
    "text": "Instructor role\nAs an instructor, my role is as guide and facilitator. My philosophy is that I teach the way I learn; to create a venue where you can be curious, get your hands dirty, make mistakes, and explore. I’m here to help you see what’s possible and help you create something you are proud of. Towards this end, I will write tutorials and lessons and help you work through the material to achieve your goals for the module. If you want to incorporate some particular functionality in your projects that I do not cover in the lessons, I will help you figure out how to do it. You can expect me to work with each of you individually on various aspects of your projects.\nYou should also expect me to be patient. I know first hand how difficult some of this material can be to digest and a big part of my role is helping you avoid many of the potholes and pitfalls I stumbled over and fell in. I can promise you that, at times, this process will be a little frustrating. But I can also promise that with some hard work (and maybe a few tears), you will have the tools to create a range of useful and beautiful documents.\nFinally, I am happy to write additional tutorials and lessons covering material not included on the site already. So please, pretty please, let me know if there is something extra you want to learn and I will write a post so other students can follow along."
  },
  {
    "objectID": "docs/lessons/lesson-1-module-overview/index.html#source-code",
    "href": "docs/lessons/lesson-1-module-overview/index.html#source-code",
    "title": "Lesson 1: Module 🦉 Overview",
    "section": "Source Code",
    "text": "Source Code\nThe source code for this page can be accessed on GitHub  by clicking this link."
  },
  {
    "objectID": "docs/lessons/lesson-1-module-overview/index.html#footnotes",
    "href": "docs/lessons/lesson-1-module-overview/index.html#footnotes",
    "title": "Lesson 1: Module 🦉 Overview",
    "section": "Footnotes",
    "text": "Footnotes\n\nHenceforth, I use the term dynamic throughout these lessons to refer to a component of a document that does something or is interactive, like a table that scrolls or a map you can zoom in on. Do not confuse this with a dynamic website.↩︎\nTo get the number of citations for this article I used the function cr_citation_count from the rcrossref package. The function takes a Digital Object Identifier (DOI) as the input and searches CrossRef OpenURL to return the number of citations.↩︎\nIf you want to embed a tweet on a page, click on the ellipsis icon at the top of the tweet , select Embed Tweet, copy the HTML code provided, & plop it right into your qmd file. The only thing is you need to do is wrap the entire code in the HTML &lt;center&gt; & &lt;/center&gt; tags.↩︎\nThe Comprehensive R Archive Network (CRAN), R’s central software repository, currently contains 19893 packages. Hundreds more can be found in places like GitHub and Bioconductor↩︎\nRecent versions of RStudio now have the functionality to run Python code in your R Markdown document.↩︎\nThe figure above is called an image map, which is a HTML technique that allows you to create clickable areas on an image. I coded this so that each logo contains a different hyperlink. Try it out. Click here if you are interested in the source code.↩︎\nWe will cover some of this in future lessons on adding custom HTML and CSS code.↩︎"
  },
  {
    "objectID": "docs/lessons/lesson-3-build-a-basic-site/index.html",
    "href": "docs/lessons/lesson-3-build-a-basic-site/index.html",
    "title": "Lesson 3: Build 📖 a Basic Site",
    "section": "",
    "text": "In this lesson, you will create your first site. Remember, you have the choice of a Distill website or a Distill blog. Since the structure of a Distill website is a bit simpler we will start there. This lesson is designed to lay down the conceptual and mechanical framework you need to get started. Your job is to understand this material because it is the basis for everything that comes after. If you do not understand something, please ask. Chances are pretty good that you are not alone.\n\n\nEstimated reading time: 14 minute(s).\n\nIf you have not already done so, please read the short post on Naming Things in the Tip n’ Tricks section before getting started."
  },
  {
    "objectID": "docs/lessons/lesson-3-build-a-basic-site/index.html#html",
    "href": "docs/lessons/lesson-3-build-a-basic-site/index.html#html",
    "title": "Lesson 3: Build 📖 a Basic Site",
    "section": "HTML",
    "text": "HTML\nHTML, or Hyper Text Markup Language provides the basic type, format, structure, and makeup of a web page or site. It is the standard markup language1 for documents displayed in web browsers. HTML lets you structure a page into elements—paragraphs, sections, headings, navigation bars, and so on. HTML elements are delineated by tags, written using angle brackets. To display the level 2 header and button we code it like so:\n&lt;h2&gt;The Button element&lt;/h2&gt;\n&lt;button type=\"button\"&gt;Click Me, I'm a button!&lt;/button&gt;\nAnd here is what it looks like on our pretend page after the code is rendered. Neat.\n\n\n\nThe Button Element\n\n\nClick Me, I’m a button!"
  },
  {
    "objectID": "docs/lessons/lesson-3-build-a-basic-site/index.html#css",
    "href": "docs/lessons/lesson-3-build-a-basic-site/index.html#css",
    "title": "Lesson 3: Build 📖 a Basic Site",
    "section": "CSS",
    "text": "CSS\nCSS, or Cascading Style Sheets, is a style sheet language 2 used to control presentation, formatting, and layout of a document written in a markup language, like HTML. . Now let’s say we wanted to style the header and button elements created above. OK, how about we modify the header to be center aligned, uppercase, and blue. While we’re at it, we can also change the look of the button. How about we make the button blue and rounded, set the font larger and white, and increase the left margin and padding.\nTo accomplish this, we add the following code to our stylesheet 3:\n\nh2 {\n  text-align: center;\n  text-transform: uppercase;\n  color: #004276;\n  font-family: 'Open Sans';\n}\n\nbutton {\n  color: #FFFFFF;\n  background-color: #004276;\n  font-size: 1.1em; \n  margin-left: 2em;\n  padding: 0.5em;\n  border-radius: 30px;\n}\n\nAnd now we get CSS-styled header and button. Again, neat but the button still doesn’t do anything useful.\n\n\n\nThe Button Element\n\n\nClick Me, I’m a button!\n\n\n\n\nNow that we have a styled button, let’s see if we can get it to do something useful. For this we can use a little JavaScript in our code."
  },
  {
    "objectID": "docs/lessons/lesson-3-build-a-basic-site/index.html#js",
    "href": "docs/lessons/lesson-3-build-a-basic-site/index.html#js",
    "title": "Lesson 3: Build 📖 a Basic Site",
    "section": "JS",
    "text": "JS\nJS, or JavaScript, is a programming language used to control the behavior of different elements. JS is used to for interactive web applications—powering features like interactive images, carousels, and forms. What if we wanted to create a button that did something useful when we clicked it? Perhaps displaying the date and time would be nice? Returning to our original HTML, we add the onclick option and a JS function that gets the current date and time.\n&lt;!-- Original Code --&gt;\n&lt;button type=\"button\"&gt;Click Me, I'm a button!&lt;/button&gt;\n…to this.\n&lt;!-- Modified with JS function --&gt;\n&lt;button type=\"button\" onclick=\"document.getElementById('demo').innerHTML = Date()\"&gt;&lt;/button&gt;\n\n\n\nThe Button Element\n\n\nClick to display Date and Time.\n\n\n\n\n\n\nSo that’s it in a nutshell. We began with a basic header and button coded in HTML, then styled both elements using CSS, and finally added some interactive functionality with JS. The beauty of writing your documents in (R) Markdown and using a framework like Distill is that a lot of this coding is already done for you. As you will learn, the Markdown text and code you write is translated into HTML. Frameworks like Distill offer pre-packaged HTML templates, the content of which is styled with built-in CSS. Distill also provides a variety of ways to add interactive JavaScript visualizations to your pages, including pre-built htmlwidgets that wrap JavaScript visualization libraries like Leaflet, Plotly, dygraphs, r2D3, and threejs. I know I sound like a broken record, but we will cover topics like theming and interactive graphics in subsequent lessons.\n\n Further Reading\nIf you are interested in developing your HTML and CSS skills I highly recommend Interneting is hard (But it doesn’t have to be), a comprehensive HTML/CSS curriculum created by Oliver James.\n\n\n\n\n\n\n\n\nI have not really learned how to code in JS yet, so I cannot really suggest any tutorials/courses but for some inspiration, check out the awesome interactive graphics in the htmlwidgets R gallery."
  },
  {
    "objectID": "docs/lessons/lesson-3-build-a-basic-site/index.html#written-recipe",
    "href": "docs/lessons/lesson-3-build-a-basic-site/index.html#written-recipe",
    "title": "Lesson 3: Build 📖 a Basic Site",
    "section": "Written recipe",
    "text": "Written recipe\n\n\nStep 1: Open RStudio and go to the File menu and select New Project. A window called New Project Wizard will pop up. Select New Directory.\n\nStep 2: Under Project Type scroll down until you see Distill Website. Hit the arrow on the right.\n\nStep 3: Fill in the part that says Directory Name. In this example I simply call it distill_website. Also, under Create project as subdirectory of: select a path to write the project. You can ignore the rest for now.\n\nStep 4: Boom! Site created. You should see three files in your RStudio IDE—index.Rmd, about.Rmd, and _site.yml. We will go through the details in a minute, but in a nutshell:\n\n\nFiles created by Distill that should show up in the RStudio IDE.\n\nFile type\nDescription\n\n\n\n_site.yml\nWebsite configuration file.\n\n\nindex.Rmd\nWebsite home page.\n\n\nabout.Rmd\nWebsite about page.\n\n\n\n\n\nStep 5: Navigate to your project directory. Notice that in addition to the three files we saw in Step 4 there is also a _site/ directory and a .Rproj file4. Open the _site/ directory and double-click index.html to open. This is your new homepage."
  },
  {
    "objectID": "docs/lessons/lesson-3-build-a-basic-site/index.html#visual-recipe",
    "href": "docs/lessons/lesson-3-build-a-basic-site/index.html#visual-recipe",
    "title": "Lesson 3: Build 📖 a Basic Site",
    "section": "Visual recipe",
    "text": "Visual recipe\nThe same steps described above—in graphical format 5.\n\n\n\n\n\n\n\nSo this site would have two pages—the landing page (index.Rmd) and a sub page called About (about.Rmd). Let’s say the root URL for this site is https://example.io/. If you were to navigate to this URL you would see the content of index.Rmd, the homepage. To access the About page you would need to go to https://example.io/about.html. Notice the homepage does not require any special extension but any sub pages do, like .../about.html."
  },
  {
    "objectID": "docs/lessons/lesson-3-build-a-basic-site/index.html#site.yml",
    "href": "docs/lessons/lesson-3-build-a-basic-site/index.html#site.yml",
    "title": "Lesson 3: Build 📖 a Basic Site",
    "section": "_site.yml",
    "text": "_site.yml\nThe _site.yml, written in YAML, instructs the R Markdown site generator (in this case Distill) how to build the site—it contains default metadata that is applied to all .Rmd files on the site. These metadata include the base URL and title, the position and content of the navigation bar, controls for the table of contents, etc. In the site you just created, the YAML file should look like this.\n---\nname: \"distill_website\"\ntitle: \"My Website\"\ndescription: |\n  My Website\noutput_dir: \"_site\"\nnavbar:\n  right:\n    - text: \"Home\"\n      href: index.html\n    - text: \"About\"\n      href: about.html\noutput: distill::distill_article\n---\nIf for example, you want to add a table of contents to every page on your site, you can just add the toc option to _site.yml, which will apply this option globally. YAML files are quite customizable but some settings are document and/or framework specific so you need to play around with the options if you want to change something. To see some of the options you can run the following in the Console of RStudio.\n\n?rmarkdown::html_document\n\n\nThe structure and formating of the _site.yml is important. Indentation, new lines, and so on need to be coded properly. A malformed _site.yml file can break your site :)\n\nClick below if you would like to see the current version of the _site.yml file for our course web site. Compare this to the default _site.yml file above. You can also access the file here.\n\nCodename: \"web\"\ntitle: \".Rmd Fieldguide\"\ndescription: |\n  R Markdown Tutorials\noutput_dir: \"public_build\"\nbase_url: https://stri-mcgill-neo.github.io/2024/\nfavicon: files/favicon_io/favicon.ico\ncollections:\n  posts:\n    categories: true\n    categories_metadata: true\n    authors_metadata: false\n    feed_items_max: 20 # default\n    citations: false\ncreative_commons: CC BY-SA\nexclude: [\"public\", \"README.html\", \"README.md\", \"page_build\", \"public_build\", \"sandbox\"]\nnavbar:\n  source_url: true\n  right:\n    - icon: fa-home\n      href: index.html\n    - text: \"Resources\"\n      menu:\n        - text: \"Distill homepage\"\n          href: https://rstudio.github.io/distill/\n    - icon: fa-github fa-lg\n      href: https://github.com/stri-mcgill-neo/2024\n    - icon: fa fa-rss\n      href: sitemap.xml\noutput:\n  distill::distill_article:\n    includes:\n      in_header: giscus.html\n    highlight_downlit: true\n    highlight: haddock\n    css: assets/css/styles.css\n    toc: true\n    toc_depth: 2\n    toc_float: true\ncompare_updates_url: https://github.com/stri-mcgill-neo/2024/compare/pubv1...master\nrss:\n  full_content: TRUE"
  },
  {
    "objectID": "docs/lessons/lesson-3-build-a-basic-site/index.html#rmd-files",
    "href": "docs/lessons/lesson-3-build-a-basic-site/index.html#rmd-files",
    "title": "Lesson 3: Build 📖 a Basic Site",
    "section": ".Rmd files",
    "text": ".Rmd files\nEach of the .Rmd files generated by Distill contain their own YAML metadata in what’s called a YAML header, contained within a code fence of three dashes (---). Any changes you make to the YAML header of a page overrides the global settings in _site.yml. At a minimum, a page must contain at least a nonempty &lt;title&gt; element in the YAML header. Everything else is optional. So if you set the global option toc: true but you do not want a TOC on your About page, you would simply set toc: false in the page’s YAML header. The two .Rmd files also contain a small code chunk containing R code (in a code fence of three back ticks, ```).\nHere is what the index.Rmd file (I added the ## comments to point out the YAML header and code chunk). The about.Rmd file is basically the same.\n## YAML header\n---\ntitle: \"My Website\"\ndescription: |\n  Welcome to the website. I hope you enjoy it!\nsite: distill::distill_website\n---\n\n## R Code chunk"
  },
  {
    "objectID": "docs/lessons/lesson-3-build-a-basic-site/index.html#written-recipe-1",
    "href": "docs/lessons/lesson-3-build-a-basic-site/index.html#written-recipe-1",
    "title": "Lesson 3: Build 📖 a Basic Site",
    "section": "Written recipe",
    "text": "Written recipe\nWhen you are ready, you have two primary options for building or rendering—you can either render an individual page or the entire site. Let’s go through each option in turn. Scroll down for a graphical representation of both options.\n\nI will use the terms building, rendering, and knitting interchangeably since they effectively mean the same thing.\nThere are several ways to render an individual page:\n\nNote. The page or document you wish to render must be open and selected.\n\n1. On the top menu bar find File and select Knit Document.\n2. Find the Console tab and run the command rmarkdown::render_site(\"index.Rmd\").\n3. In the window of the document you wish to render, find the Knit button and click it.\n4. Use the shortcut key sequence.\n\nOn a Mac command+shift+K or ⌘+⇧+K.\n\nOn a Windows/Linux (I think) ctrl+shift+K or ⌃+⇧+ K.\n\n5. You also have the option of selecting Knit on Save so every time you save the document it is automatically rendered. For now I advise against doing this since it takes control out of your hands.\nThere are several ways to render an entire site:\n1. Find the Build tab and hit the ⛏Build Website button.\n2. On the top menu bar find Build and select Build All.\n3. Find the Console tab and run the command rmarkdown::render_site().\n4. Use the shortcut key sequence.\n\nOn a Mac command+shift+B or ⌘+⇧+B.\n\nOn a Windows/Linux (I think) ctrl+shift+B or ⌃+⇧+ B."
  },
  {
    "objectID": "docs/lessons/lesson-3-build-a-basic-site/index.html#visual-recipe-1",
    "href": "docs/lessons/lesson-3-build-a-basic-site/index.html#visual-recipe-1",
    "title": "Lesson 3: Build 📖 a Basic Site",
    "section": "Visual recipe",
    "text": "Visual recipe"
  },
  {
    "objectID": "docs/lessons/lesson-3-build-a-basic-site/index.html#source-code",
    "href": "docs/lessons/lesson-3-build-a-basic-site/index.html#source-code",
    "title": "Lesson 3: Build 📖 a Basic Site",
    "section": "Source Code",
    "text": "Source Code\nThe source code for this page can be accessed on GitHub  by clicking this link."
  },
  {
    "objectID": "docs/lessons/lesson-3-build-a-basic-site/index.html#footnotes",
    "href": "docs/lessons/lesson-3-build-a-basic-site/index.html#footnotes",
    "title": "Lesson 3: Build 📖 a Basic Site",
    "section": "Footnotes",
    "text": "Footnotes\n\nMarkup language is a computer language that uses tags to define elements within a document. It is human-readable, meaning markup files contain standard words, rather than typical programming syntax.↩︎\nA style sheet language is a computer language that expresses the presentation of structured documents.↩︎\nThere are three ways you implement CSS into your HTML: internal, external, and inline styles. Internal or embedded CSS requires you to add &lt;style&gt; tag in the &lt;head&gt; section of your HTML document. With external CSS, you’ll link your web pages to an external .css file, which can be created by any text editor in your device. Inline CSS is used to style a specific HTML element. For this CSS style, you’ll only need to add the style attribute to each HTML tag, without using selectors. I mainly use an external CSS for styling. For example, here is the CSS file for our site↩︎\nThis file contains various project options and can also be used as a shortcut for opening the project directly from the filesystem.↩︎\nThis image carousel was created using the slickR package. slickR is a great option for displaying graphics like figures and images. We will cover slickR in a future lesson.↩︎\nYAML is a human-readable markup language. With it, you can create easily readable documents that can be consumed by a variety of programming languages.↩︎"
  },
  {
    "objectID": "docs/lessons/lesson-5-markdown-meet-r/index.html",
    "href": "docs/lessons/lesson-5-markdown-meet-r/index.html",
    "title": "Lesson 5: Markdown say hello to 🤝 R",
    "section": "",
    "text": "If you have experience using R, you know there are different ways to process code. You can run commands interactively in the R console or use batch processing to run scripts. You can send results to files (like figures or tables), print results to the screen, or save the results as object in the R environment.\nProcessing code in a R Markdown document is very similar in principle. When you incorporate code in your R Markdown document and render that document, knitr first executes all of the code. However, in order to do this, knitr needs to know which text in the document is code. To differentiate code from normal text, we can either use code chunks or inline code. Think of code chunks and inline code as mini R environments. knitr essentially pulls the code out, runs the code, and then puts the results in a new document as Markdown-formatted text.\nLet me show you what I mean. The image on the left is a screenshot from a HTML page that was built from a R Markdown document. The R Markdown document contained a line of R code, in this case base::summary(trees), that was executed by knitr during the rendering process. Below the command you can see the output. I did not code the results into the document, rather knitr did when it ran the command.\nOn the right is a screenshot of my R console. I just copied the command and ran it in regular old R. I hope you can see that aside for some formatting differences, these results are identical. This is because knitr is running the code in R and encoding the results in Markdown, itself translated to HTML by PanDoc. Ninety-five percent of the time, all you need to do is paste your R code into a code chunk and it will be processed like this. Of course, nothing is absolute, and we will encounter some exceptions.\nExecuting the same command in a R Markdown document (left) and the R console (right)."
  },
  {
    "objectID": "docs/lessons/lesson-5-markdown-meet-r/index.html#code-chunk-anatomy",
    "href": "docs/lessons/lesson-5-markdown-meet-r/index.html#code-chunk-anatomy",
    "title": "Lesson 5: Markdown say hello to 🤝 R",
    "section": "Code chunk anatomy",
    "text": "Code chunk anatomy\nGreat. Let me begin by first explaining the structure of a code chunk. Below is an annotated screenshot of a piece of code I wrote to define a simple, accessible color palette. For the moment you can ignore what this code does, rather make sure you understand how the chunk is structured. There are five main components of a code chunk: 1) the code itself, 2) code delimiters, 3) the coding language, 4) the chunk name, and 5) the chunk options.\n\nIf you haven’t worked much with colors, the strings preceded by hash tags (#) are called hex codes. Hex codes are great for encoding color in many languages, including R.\n\n\n\n\n\n\n     \n\nAnatomy of a code chunk. The formatting here is strict. Make sure to follow it exactly. This figure contains clickable links if you are interested in learning more about these tools.\n\n\n1. The code\nIf you want to execute and render code in your document, the first thing you need of course is code. If I just write the code above in my document and run knitr, the code in the rendered document would look something like this:\n\nfriend_pal &lt;- c(“#009E73”, “#D55E00”, “#F0E442”, “#CC79A7”, “#56B4E9”, “#E69F00”, “#0072B2”, “#7F7F7F”, “#B6DBFF”)\ncols &lt;- function(a) image(1:9, 1, as.matrix(1:9), col = a, axes = FALSE, xlab = ““, ylab =”“) cols(friend_pal)\n\nNotice that there is no formatting and nothing is executed. This is because knitr does not know the text above is code—it simply reads it as text and renders it accordingly. If we want more than this we need to include additional information.\n2. Delimiters\nCode in R Markdown is distinguished from the rest of the text with delimiters. Often called a code fence, delimiters partition your code from the rest of the text. Code chunks in R markdown are delimited by three back ticks (```), which open and close the chunk. If we wrap the text above in back ticks then the final output is formatted like so:\n\n```{r}\nfriend_pal &lt;- c(\"#009E73\", \"#D55E00\", \"#F0E442\",\n                \"#CC79A7\", \"#56B4E9\", \"#E69F00\",\n                \"#0072B2\", \"#7F7F7F\", \"#B6DBFF\")\n\ncols &lt;- function(a) image(1:10, 1, as.matrix(1:10),\n                          col = a, axes = FALSE , xlab = \"\", ylab = \"\")\ncols(friend_pal)\n```\n\nNow we have formatted code. Neat. Even though knitr recognizes this as code (of some kind), it has no idea what language the code is written in and thus will not evaluate and execute the chunk—it simply takes the code between the delimiters and turns into Markdown-formatted code text. This can actually be useful if you want to call out a block of code without running anything. But if you want knitr to actually do something with this code, you need to provide more information.\n\nAny additional code chunk details must be enclosed in curly brackets ({ }).\n\nLet me say that again. Any additional code chunk details must be enclosed in curly brackets ({ }). Failure to do so will break your document and make you very frustrated. Everything described below needs to be enclosed in curly brackets.\n3. Coding Language\nTo evaluate code, the minimum information you need to provide is the name of a language. R Markdown supports many languages like Python, BASH, and of course R. For example, I can call BASH and run a simple command just like I would do in a terminal. Here I use the ls command to list all the files in a directory and add the flags l to get a long listing for every file, a to include any hidden files, and h to return file sizes in human readable format.\nPretty please pay attention to the structure of the chunk.\n\nThree back ticks ( ``` ),\nfollowed by open curly bracket ( { ),\nthe language name (bash),\nclosed curly bracket ( } ),\n\n&lt;return&gt;,\nthe command you want to run,\n\n&lt;return&gt; again,\nand finally three back ticks ( ``` ).\n\nIf you fail to follow this format, RStudio will not be very nice.\n\n```{bash}\nls -lah\n```\n\n\n\ntotal 112\ndrwxr-xr-x@  6 rad  staff   192B Sep 16 09:40 .\ndrwxr-xr-x@ 10 rad  staff   320B Sep 16 09:39 ..\n-rw-r--r--@  1 rad  staff   6.0K Sep 16 09:17 .DS_Store\ndrwxr-xr-x@  8 rad  staff   256B Sep 15 16:11 files\n-rw-r--r--@  1 rad  staff    20K Sep 16 09:40 index.qmd\n-rw-r--r--@  1 rad  staff    20K Sep 16 09:40 index.rmarkdown\n\n\nBy specifying a language, knitr was able to interpret the code and run the commands. And as you can see, I get a printout of the results right in the final document. Though we will mainly use the r language option you may want to explore the functionality of other languages in your own work. OK, back to R.\n\nAlso make certain that there are line breaks before and after code chunks.\n\nSuppose I want to generate some quick summary statistics for one of the built-in data sets using the base::summary() function. In my R Markdown document I would code the chunk like so.\n\n```{r}\nbase::summary(trees)\n```\n\nThis command simply calls the summary function (from the base package) and runs the it using the trees data set. When I build my document, the code chunk renders like this followed by the output of the command:\n\nbase::summary(trees)\n\n     Girth           Height       Volume     \n Min.   : 8.30   Min.   :63   Min.   :10.20  \n 1st Qu.:11.05   1st Qu.:72   1st Qu.:19.40  \n Median :12.90   Median :76   Median :24.20  \n Mean   :13.25   Mean   :76   Mean   :30.17  \n 3rd Qu.:15.25   3rd Qu.:80   3rd Qu.:37.30  \n Max.   :20.60   Max.   :87   Max.   :77.00  \n\n\nThe main thing to notice about the rendered code chunk is that there are no chunk delimiters or any information about the chunk, just the formatted command base::summary(trees) with the formatted results printed below.\n4. Chunk name\nAdding a chuck name is optional but my advice is to always add a name. The main reason is that it is easier to track down problems if each chunk has a name—especially in large documents or websites. Keep the name simple. If you follow the same rules I described in the post on naming things, you should be OK. Bad chunk names can cause errors when a document is rendered.\n\nThe name must be unique, it needs to come right after the language variable, and it must be separated by a space. Failure to follow these rules will result in errors.\n\nIf you look at any of my code you will notice that I do not use chunk names. I don’t add chunk names for one simple reason, I’m lazy This is one of those cases where you should probably not follow my example.\n5. Chunk Options\nThe last piece of this puzzle are the chunk options. Options are listed after the language and the name and must be separated by a comma (,). Chunk options are how you fine-tune the way knitr processes and renders your code. There are something like 50 chunk options, and it can get a little confusing to figure out what each one does and when to use them. I only want to cover the most common options here and will leave the rest up to you. You can familiarize yourself with the chunk options by checking out the relevant sections from the R Markdown Cookbook, R Markdown: The Definitive Guide, and the knitr guide.\nIf you remember back when you created your first Distill site, R Markdown populated the index.Rmd and about.Rmd each with a code chunk that looked like this:\nThere are a few things to unpack here. First, the language of the chunk is r, the name is setup, and the option is include=FALSE. With include=FALSE, the code chunk is evaluated but the code and any output will be completely suppressed.\nSecond, the command that is called within the chunk uses the opts_chunk$set function from the knitr package to set a global chunk option for the entire document, in this case echo = FALSE. The echo option controls whether code chunks are visible in the rendered document. Setting the global command echo = FALSE means that all chunks in the rendered document will be hidden by default. The only way to escape this behavior is to either change the global option to echo = TRUE or set echo = TRUE for individual code chunks.\nFor example, let’s return to our toy example where we summarize the trees data set. If we leave the global option as is, the code chunk will be evaluated but not rendered in the final document. However, if we want to see the code in that chunk we must set echo=TRUE, like so.\n\n```{r}\n#| label: summary1\nbase::summary(trees)\n```\n\nAnd the rendered code will look like this.\n\nbase::summary(trees)\n\n     Girth           Height       Volume     \n Min.   : 8.30   Min.   :63   Min.   :10.20  \n 1st Qu.:11.05   1st Qu.:72   1st Qu.:19.40  \n Median :12.90   Median :76   Median :24.20  \n Mean   :13.25   Mean   :76   Mean   :30.17  \n 3rd Qu.:15.25   3rd Qu.:80   3rd Qu.:37.30  \n Max.   :20.60   Max.   :87   Max.   :77.00  \n\n\nWhat about if we want to see the code but do not want it evaluated (executed). In that case we need to add the option eval=FALSE, like so\n\n```{r}\n#| label: summary3\n#| eval: false\n\nbase::summary(trees)\n```\n\nHere we see the code but no output is included. In other words, the code was not run because we set eval=FALSE.\n\nbase::summary(trees)\n\n\n Assignment\nAs we move through the course we will explore additional chunk options, especially when we cover figures and tables, which have their own settings. For now, play around with include, eval, and echo in your documents. Use dummy data if you want."
  },
  {
    "objectID": "docs/lessons/lesson-5-markdown-meet-r/index.html#source-code",
    "href": "docs/lessons/lesson-5-markdown-meet-r/index.html#source-code",
    "title": "Lesson 5: Markdown say hello to 🤝 R",
    "section": "Source Code",
    "text": "Source Code\nThe source code for this page can be accessed on GitHub  by clicking this link."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Quarto® Fieldguide",
    "section": "",
    "text": "Welcome to the Data Curation/R Markdown module of the STRI-McGill Neotropical field course. This module is meant as a complement for the rest of the curriculum and our main goals here are to: a) create interactive, data-driven, web products that capture analytical workflows, raw data, and data outputs; and b) hopefully give you the tools, motivation, and inspiration to make your science more accessible, transparent, and reproducible."
  }
]